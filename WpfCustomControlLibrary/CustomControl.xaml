<ResourceDictionary  x:Class="WPFCustomControlLibrary.CustomControl"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPFCustomControlLibrary" 
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"                        
                   >
    <!-- 同一资源页面中，注意样式资源定义的先后关系，前面定义的资源无法引用后面定义的资源-->
    <!--#region 边框样式-->
    <!--#region  边框样式1-->
    <Style x:Key="CustomBtnBorder" TargetType="Border">
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="CornerRadius" Value="3"></Setter>
        <Setter Property="Padding" Value="1"></Setter>
    </Style>
    <!--#endregion-->
    <!--#region 边框样式2-->
    <Style x:Key="CustomBtnBorder2" TargetType="Border">
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="Padding" Value="3"></Setter>
        <Setter Property="Margin" Value="3"></Setter>
        <!--<Setter Property="Effect" >
            <Setter.Value>
                <DropShadowEffect BlurRadius="3" RenderingBias="Performance" ShadowDepth="0" Opacity="1"/>
            </Setter.Value>
        </Setter>-->
    </Style>
    <!--#region ToolTip样式-->
    <Style    TargetType="{x:Type ToolTip}">
        <Setter  Property="Foreground" Value="White"/>
        <Setter  Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ToolTip}">
                    <Grid     Width="{TemplateBinding Width}"     Height="{TemplateBinding Height}"  >
                        <Rectangle RadiusX="9" RadiusY="9"   Stroke="LightGray"    StrokeThickness="0">
                            <Rectangle.Fill>
                                <RadialGradientBrush>
                                    <GradientStop />
                                    <!--<GradientStop       Color="FloralWhite"   Offset="0" />-->
                                    <GradientStop       Color="Black"   Offset="0" />
                                    <GradientStop   Color="Cornsilk"     Offset="2" />
                                </RadialGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter  Margin="6 4 6 4"   />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#endregion-->
    <!--#endregion -->
    <!--#region StackPanel样式-->
    <Style x:Key="StackPanelStyle1" x:Name="stackPanel1"  TargetType="{x:Type StackPanel}">

        <Setter Property="Background" Value="#1BA1E2">

        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Value="True">
                <Setter  Property="Background" >
                    <Setter.Value >
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Black" Offset="0"/>
                            <GradientStop Color="#FF82CCB5" Offset="0.454"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region 按钮样式 -->
    <!--#region 带图按钮样式1-->
    <!--模板是控件的一个属性，可改变控件形状，分为控件模板和数据模板，控件模板是控件外衣，数据模板是内容外衣。
    模板一般定义于样式中，使用时直接使用样式即可达到方便复用的目的。
    样式：非控件初始自带属性，它是为了改变控件的自带属性而设计，不用模板时一般不能改变控件的形状。-->
    <Style  TargetType="{x:Type local:ImageButton}">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Width" Value="30"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0.6"></Setter>
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border Style= "{StaticResource CustomBtnBorder }" BorderThickness="0.6" BorderBrush="Black">
                        <Image Name="imgBlock" Source="{TemplateBinding Icon}" Margin="1"  Stretch="Fill" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1.0"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <!--定义视觉树-->
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="3">
                        <Border.Background>
                            <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="0.6" CornerRadius="3" BorderBrush="Black">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <!--<ContentPresenter x:Name="content" Margin="1"  HorizontalAlignment="Center" VerticalAlignment="Center">
                            </ContentPresenter>-->
                            <Image Name="imgBlock" Source="{TemplateBinding Icon}" Margin="1"  Stretch="Fill" />
                        </Border>
                    </Border>
                    <!--定义视觉树_end-->
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--属性触发器： 鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#3FFF" BeginTime="0:0:0.1" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#AFFF" BeginTime="0:0:0.1" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region 带图按钮样式2-->
    <!--模板是控件的一个属性，可改变控件形状，分为控件模板和数据模板，控件模板是控件外衣，数据模板是内容外衣。
    模板一般定义于样式中，使用时直接使用样式即可达到方便复用的目的。
    样式：非控件初始自带属性，它是为了改变控件的自带属性而设计，不用模板时一般不能改变控件的形状。-->
    <!--<Style x:Key="imagebtn2" TargetType="Button">-->
    <Style x:Key="imagebtn2" TargetType="Button">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Padding" Value="0 0 0 0"></Setter>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="Foreground" Value="Honeydew"></Setter>
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!--定义视觉树-->
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="3">
                        <Border.Background>
                            <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="0.6" CornerRadius="3" BorderBrush="Black">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" Margin="1"  HorizontalAlignment="Center" VerticalAlignment="Center">
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--定义视觉树_end-->
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--属性触发器： 鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#3FFF" BeginTime="0:0:0.1" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#AFFF" BeginTime="0:0:0.1" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
  <!--#region 带图按钮样式3-->
    <!--模板是控件的一个属性，可改变控件形状，分为控件模板和数据模板，控件模板是控件外衣，数据模板是内容外衣。
    模板一般定义于样式中，使用时直接使用样式即可达到方便复用的目的。
    样式：非控件初始自带属性，它是为了改变控件的自带属性而设计，不用模板时一般不能改变控件的形状。-->
    <!--<Style x:Key="imagebtn2" TargetType="Button">-->
    <Style x:Key="imagebtn3" TargetType="Button">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Padding" Value="0 0 0 0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="Honeydew"></Setter>
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!--定义视觉树-->
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="0" Background="Transparent">
                        <!--<Border.Background>
                            --><!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变--><!--
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        --><!--GradientStop:定义渐变颜色与颜色渐变始点--><!--
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>-->
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="0" CornerRadius="0" BorderBrush="Transparent" Background="Transparent">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" Margin="1"  HorizontalAlignment="Center" VerticalAlignment="Center">
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--定义视觉树_end-->
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--属性触发器： 鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="fore" Property="Background"  Value="white"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  <!--#endregion-->
    <!--#region 带图按钮样式3-->
    <!--模板是控件的一个属性，可改变控件形状，分为控件模板和数据模板，控件模板是控件外衣，数据模板是内容外衣。
    模板一般定义于样式中，使用时直接使用样式即可达到方便复用的目的。
    样式：非控件初始自带属性，它是为了改变控件的自带属性而设计，不用模板时一般不能改变控件的形状。-->
    <!--<Style x:Key="imagebtn2" TargetType="Button">-->
    <Style x:Key="imagebtn4" TargetType="ToggleButton">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Padding" Value="0 0 0 0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="Honeydew"></Setter>
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <!--定义视觉树-->
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="0" Background="Transparent">
                        <!--<Border.Background>
                            -->
                        <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                        <!--
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        -->
                        <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                        <!--
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>-->
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="0" CornerRadius="0" BorderBrush="Transparent" Background="Transparent">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" Margin="1"  HorizontalAlignment="Center" VerticalAlignment="Center">
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--定义视觉树_end-->
                    <!--定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--属性触发器： 鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="fore" Property="Background"  Value="white"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--定义触发器_End-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    <!--#region 按钮样式1 -->
    <Style x:Key="btn1" TargetType="Button">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Width" Value="80"></Setter>
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Padding" Value="0 0 0 0"></Setter>
        <Setter Property="Background" Value="Black"></Setter>
        <Setter Property="Foreground" Value="Honeydew"></Setter>
        <!--<Setter Property="BorderBrush" Value="YellowGreen"></Setter>-->
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <!--控件模板-->
                <ControlTemplate TargetType="Button">
                    <!--背景色-->
                    <Border x:Name="back" Opacity="0.8" CornerRadius="3">
                        <Border.BitmapEffect>
                            <!--边框为0的外发光效果-->
                            <OuterGlowBitmapEffect Opacity="0.7" GlowSize="0" GlowColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" />
                        </Border.BitmapEffect>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="0.6" CornerRadius="3" BorderBrush="Black">
                            <!--fore 实现按钮的边框和高亮反光效果，半透明的黑色1像素边框，使边框的色彩可以和背景色混合起来-->
                            <!--背景同样采用的渐变笔刷，起始值和终止值的位置几乎贴在一起，从而形成比较鲜明的反光度对比。-->
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}">
                                <!--一个不太明显的阴影滤镜以增强显示效果-->
                                <!--
                                <ContentPresenter.BitmapEffect>
                                    <DropShadowBitmapEffect Color="#000" Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.3" />
                                </ContentPresenter.BitmapEffect>-->
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="6" Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#AFFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#3FFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />-->
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="3" Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#3AAA" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#2111" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮失效-->
                        <!--当按钮失效时，要改变很多东西，首先将文字颜色设为灰色，然后依次创建了改变外发光效果大小、改变内容阴影效果不透明度、
                        改变内容阴影效果角度、改变内容阴影效果颜色、改变按钮边框颜色、改变上部反光区域颜色、改变下部反光区域颜色的动画。
                         这里将先前对内容应用的阴影效果彻底改变，使之产生凹陷的效果-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#B444"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation To="1" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation To="-135" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation To="#FFF" Duration="0:0:0.3" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation To="#D555" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation To="#CEEE" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#CDDD" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#endregion -->
    <!--#region 菜单条样式 -->
    <!--#region 0-->
    <!--MenuItem-->
    <Style x:Key="0"  TargetType="MenuItem">
        <Setter Property="Background" Value="#1BA1E2"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid ToolTip="{TemplateBinding Header}" Height="24"  Width="{TemplateBinding Width}">
                        <Grid.Background>
                            <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Grid.Background>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Border Background="Transparent"/>-->
                        <!--<Border x:Name="_border"   Grid.ColumnSpan="2"/>-->
                        <!--<Image x:Name="_imgicon" Width="12" Height="12" Stretch="Uniform" Source="{Binding Icon,RelativeSource={RelativeSource TemplatedParent}}" />-->
                        <TextBlock Foreground="White" Grid.Column="1" Margin="5 0 15 0"  VerticalAlignment="Center" x:Name="_txt" Text="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--<Path  Visibility="Collapsed" x:Name="_path" Grid.Column="1" HorizontalAlignment="Right"  Margin="5 13 5 0"   Data="M0,4 4,0 0,-4 z" Fill="#7E8A92"/>-->
                        <Popup  Placement="Bottom" x:Name="SubMenuPopup" AllowsTransparency="True"   Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" >
                            <ScrollViewer   ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                <Border  Name="SubmenuBorder" BorderBrush="Transparent" BorderThickness="0"  SnapsToDevicePixels="True"    >
                                    <!--<Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="#6FFF" Offset="0.5"/>
                                                    <GradientStop Color="#1111" Offset="0.51"/>
                                                </GradientStopCollection>
                                            </GradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Border.Background>-->
                                    <StackPanel   IsItemsHost="True"   KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Border>
                            </ScrollViewer>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="true">
                            <!--<Setter TargetName="_path" Property="Visibility" Value="Visible"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter TargetName="_border" Property="Background" Value="#ffc787"/>-->
                            <Setter TargetName="_txt" Property="Foreground" Value="White"/>
                            <!--<Setter TargetName="_path" Property="Fill" Value="White"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="_txt" Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->
    <!--#region 1-->
    <Style x:Key="menuItem1" TargetType="MenuItem">
        <Setter Property="Margin" Value="1,1,1,1"></Setter>
        <Setter Property="Background" Value="#FF059EA8"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="AllowDrop"  Value="False" ></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Style= "{StaticResource CustomBtnBorder }" Background="#FF059EA8" Width="200" Height="50">
                        <Border.OpacityMask>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Offset="0" Color="#FF059EA8"/>
                                <GradientStop Offset="1" Color="Transparent"/>
                            </LinearGradientBrush>
                        </Border.OpacityMask>
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Header}">
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region 2-->
    <!--MenuItem-->
    <Style  x:Key="menuItem2"  TargetType="MenuItem">
        <Setter Property="Background" Value="#1BA1E2"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid ToolTip="{TemplateBinding Header}" Height="30"  Width="{TemplateBinding Width}">
                        <Grid.Background>
                            <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Grid.Background>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Border Background="Transparent"/>-->
                        <!--<Border x:Name="_border"   Grid.ColumnSpan="2"/>-->
                        <!--<Image x:Name="_imgicon" Width="12" Height="12" Stretch="Uniform" Source="{Binding Icon,RelativeSource={RelativeSource TemplatedParent}}" />-->
                        <TextBlock Foreground="White" Grid.Column="1" Margin="5 0 15 0"  VerticalAlignment="Center" x:Name="_txt" Text="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--<Path  Visibility="Collapsed" x:Name="_path" Grid.Column="1" HorizontalAlignment="Right"  Margin="5 13 5 0"   Data="M0,4 4,0 0,-4 z" Fill="#7E8A92"/>-->
                        <Popup  Placement="Bottom" x:Name="SubMenuPopup" AllowsTransparency="True"   Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" >
                            <ScrollViewer   ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                <Border  Name="SubmenuBorder" BorderBrush="Transparent" BorderThickness="0"  SnapsToDevicePixels="True"    >
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="#6FFF" Offset="0.5"/>
                                                    <GradientStop Color="#1111" Offset="0.51"/>
                                                </GradientStopCollection>
                                            </GradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel   IsItemsHost="True"   KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Border>
                            </ScrollViewer>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="true">
                            <!--<Setter TargetName="_path" Property="Visibility" Value="Visible"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter TargetName="_border" Property="Background" Value="#ffc787"/>-->
                            <Setter TargetName="_txt" Property="Foreground" Value="White"/>
                            <!--<Setter TargetName="_path" Property="Fill" Value="White"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="_txt" Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <!--#endregion-->
    <!--#region 3-->
    <Style x:Key="menuItem3" TargetType="MenuItem">

        <Setter Property="Background" >
            <Setter.Value>
                <!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变-->
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <!--GradientStop:定义渐变颜色与颜色渐变始点-->
                            <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                            <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                            <GradientStop Color="#FFF" Offset="1"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

    </Style>
    <!--#endregion-->
    <!--#endregion-->
<!--#region 右键菜单样式 -->

    <!--自定义ContextMenu的外观样式-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property ="Focusable" Value="False"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border 
                      Name="Border"
                      Background="#6EA0B0"
                      BorderBrush="#888888"
                      BorderThickness="1" >
                        <StackPanel IsItemsHost="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--自定义菜单项之间的分隔符的样式-->
    <Style  TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="#888888" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter 
                Margin="6,3,6,3" 
                ContentSource="Header"
                RecognizesAccessKey="True" />
                <Popup 
                Name="Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                AllowsTransparency="True" 
               Focusable="False"
                PopupAnimation="Slide">
                    <Border 
                  Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  Background="#FFFFFF"
                  BorderBrush="#888888"
                  BorderThickness="1" >
                        <StackPanel  
                    IsItemsHost="True" 
                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Green"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>
    <!-- TopLevelItem -->
    <ControlTemplate 
      x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
      TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter  Margin="20,3,6,10"  ContentSource="Header"     RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Blue"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    
    <!-- SubmenuItem 自定义菜单项的外观样式-->
    <ControlTemplate 
   x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
   TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid  >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="0"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter    Name="Icon"    Margin="6,2,6,2"  HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"      ContentSource="Icon"/>
                <Border      Name="Check"  Width="13" Height="13"   Visibility="Hidden"    Margin="6,0,6,0"  Background="#C0C0C0"  BorderThickness="1"     BorderBrush="#404040">
                    <Path    Name="CheckMark"  Width="7" Height="7"   Visibility="Visible"   SnapsToDevicePixels="False"    Stroke="#404040"     StrokeThickness="1"    Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter       Name="HeaderHost"    Grid.Column="1"       ContentSource="Header"                RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"  Grid.Column="2"  Background="Transparent"   Text="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}"    Margin="5,2,0,2"     DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>

            <!--选中菜单项时的高亮颜色的trigger设置-->
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Green"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="gray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate     x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"     TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter     Name="Icon"    Margin="0"   HorizontalAlignment="Stretch"   VerticalAlignment="Stretch"     ContentSource="Icon"/>
                <ContentPresenter  Name="HeaderHost" Grid.Column="1" ContentSource="Header"      RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"   Grid.Column="2"   Text="{TemplateBinding InputGestureText}"    Margin="0,0,0,0"   DockPanel.Dock="Right"/>
                <Path      Grid.Column="3"    HorizontalAlignment="Center"  VerticalAlignment="Center"   Data="M 0 0 L 0 7 L 4 3.5 Z"   Fill="#404040" />
                <Popup   Name="Popup"   Placement="right"  HorizontalOffset="4" VerticalOffset="100"  IsOpen="{TemplateBinding IsSubmenuOpen}"    AllowsTransparency="True"   Focusable="False"  PopupAnimation="Fade">
                    <Border   Name="SubmenuBorder" SnapsToDevicePixels="True"        BorderBrush="#888888"     BorderThickness="1" >
                        <!--<StackPanel   IsItemsHost="True"       KeyboardNavigation.DirectionalNavigation="Cycle" />-->
                        <WrapPanel Width="360"   IsItemsHost="True"    Background="Transparent"    Orientation="Horizontal" />
                        <!--<Border.Background>
                            --><!--使用LinearGradientBrush渐变画刷：定义一个渐变画刷，然后需要定义渐变颜色，颜色已直线形式渐变--><!--
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        --><!--GradientStop:定义渐变颜色与颜色渐变始点--><!--
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>-->
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#888888"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- MenuItem Style -->
    <Style x:Key="menuItem"  TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- MenuItem Style -->
    <Style   TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
   

    <!--#endregion-->
    <!--#region 选项卡样式-->
    <!--#region 选项卡样式1-->
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#1BA1E2" />
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#1BA1E2" />
    <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Border CornerRadius="0" BorderThickness="0" >

                        <Grid   x:Name="templateRoot"
                            ClipToBounds="true"
                            KeyboardNavigation.TabNavigation="Local"
                            SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"  />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>
                            <TabPanel
                                x:Name="headerPanel"
                                Grid.Row="0"
                                Grid.Column="0"
                                Margin="0"
                                Panel.ZIndex="1"
                                IsItemsHost="true"
                                KeyboardNavigation.TabIndex="1" Opacity="1" Background="#1BA1E2"  >
                                <!--<TabPanel.Background>
                                <RadialGradientBrush>
                                    <GradientStop Color="Black" Offset="0"/>
                                    <GradientStop Color="#1BA1E2" Offset="1"/>
                                </RadialGradientBrush>
                            </TabPanel.Background>-->
                                <!--<TabPanel.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="#1BA1E2"/>
                                    <GradientStop Offset="1" Color="Transparent"/>
                                </LinearGradientBrush>
                            </TabPanel.OpacityMask>-->
                            </TabPanel>
                            <!--Background="{TemplateBinding Background}"-->
                            <Border
                                x:Name="contentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                Background="White"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter
                                    x:Name="PART_SelectedContentHost"                                 
                                    ContentSource="SelectedContent"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  Margin="{TemplateBinding Padding}"
                                />
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Margin" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="auto" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="*" />
                            <Setter TargetName="headerPanel" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="headerPanel" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="headerPanel" Property="Margin" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}" >


        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="#1BA1E2"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="Padding" Value="0" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate >
                    <Border x:Name="grid" CornerRadius="0" BorderThickness="1" Background="#1BA1E2" >
                        <ContentPresenter>
                            <ContentPresenter.Content>
                                <TextBlock
                                                Margin="2"
                                                FontSize="10"
                                                Text="{TemplateBinding Content}" />
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Border>
                    <!--<DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Value="True">
                            <Setter TargetName="grid" Property="Background" >
                                <Setter.Value >
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#FF82CCB5" Offset="0.454"/>
                                    </LinearGradientBrush>
                                   
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>-->
                </DataTemplate>
            </Setter.Value>
        </Setter>



        <Style.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="True">
                <Setter Property="TabItem.Template" >
                    <Setter.Value>
                        <ControlTemplate>
                            <!--<Canvas Name="canvas" Background="#1BA1E2" Width="auto" Height="auto">
                                <TextBlock HorizontalAlignment="Center" 
                                               VerticalAlignment="Center"
                                               Canvas.Top="3" 
                                               Text="{TemplateBinding HeaderedContentControl.Header}"
                                               Canvas.Left="8">
                                </TextBlock>
                            </Canvas>-->
                            <Border x:Name="grid" CornerRadius="0" BorderThickness="1" Background="#FF1BE2E2"  >
                                <!--<Border.Background>
                                   
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="Black" Offset="0"/>
                                                <GradientStop Color="#FF82CCB5" Offset="0.454"/>
                                            </LinearGradientBrush>
                                  
                                </Border.Background>-->
                                <ContentPresenter>
                                    <ContentPresenter.Content>
                                        <TextBlock
                                                Margin="2"
                                                FontSize="10"
                                                Text="{TemplateBinding HeaderedContentControl.Header}" />
                                    </ContentPresenter.Content>
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabItem.FontWeight" Value="Bold"/>
                <!--<Setter Property="TabItem.Foreground" Value="White"/>-->

            </Trigger>

        </Style.Triggers>

    </Style>
    <Style x:Key="TabItemStyle1.2" x:Name="t1" TargetType="{x:Type TabItem}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="#1BA1E2"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="Padding" Value="0" />
        <Setter Property="HeaderTemplate" x:Name="header">
            <Setter.Value>
                <DataTemplate >
                    <Border x:Name="grid" CornerRadius="0" BorderThickness="1" Background="#1BA1E2">
                        <ContentPresenter>
                            <ContentPresenter.Content  >
                                <!--注意与数据模板与控件模板在此处呈现内容时的区别,主要是TemplateBinding后面的区别，以下3种方式仅第一种可以，另外两种会使标题叠加-->
                                <ContentControl Content="{TemplateBinding Content}" />
                                <!--<ContentControl Content="{TemplateBinding HeaderedContentControl.Header}" />-->
                                <!--<HeaderedContentControl Content="{TemplateBinding HeaderedContentControl.Header}" />-->
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Border>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Value="True">
                            <Setter TargetName="grid" Property="Background" >
                                <Setter.Value >
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#FF82CCB5" Offset="0.454"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="True">
                <Setter Property="TabItem.Template" >
                    <Setter.Value>
                        <ControlTemplate>

                            <Border x:Name="grid" CornerRadius="0" BorderThickness="1" Background="#FF1BE2E2"  >
                                <!--<Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#FF82CCB5" Offset="0.454"/>
                                    </LinearGradientBrush>
                                </Border.Background>-->
                                <ContentPresenter>
                                    <ContentPresenter.Content>
                                        <!--注意与数据模板与控件模板在此处呈现内容时的区别,主要是TemplateBinding后面的区别，以下2种方式均可-->
                                        <ContentControl Content="{TemplateBinding HeaderedContentControl.Header}" />
                                        <!--<HeaderedContentControl Content="{TemplateBinding HeaderedContentControl.Header}" />-->
                                        <!--<TextBlock HorizontalAlignment="Center"     VerticalAlignment="Center"     Text="{TemplateBinding HeaderedContentControl.Header}"  >  </TextBlock>-->
                                    </ContentPresenter.Content>
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabItem.FontWeight" Value="Bold"/>


            </Trigger>

        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region 选项卡样式2-->
    <Style x:Key="TabControlStyle2" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFACACAC"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    </Style>
    <!--即使如上设置了，TabControl的标题还是很丑，这个时候就需要通过设置TabItem来更改标题样式了。TabItem样式如下：-->
    <Style x:Key="TabItemStyle2" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#FFACACAC"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot"  SnapsToDevicePixels="True" Background="Transparent">
                        <TextBlock x:Name="txt" Visibility="Visible" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}" ToolTip="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="txt" Value="#fffea1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Foreground" TargetName="txt" Value="#fffea1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    <!--#endregion-->
    <!--#region DataGrid样式-->
    <!--DataGrid样式-->
    <Style  TargetType="DataGrid">
        <!--网格线颜色-->
        <!--<Setter Property="CanUserResizeColumns" Value="false"/>-->
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#1BA1E2" />
        <Setter  Property="CanUserResizeColumns" Value="true"></Setter>
        <Setter  Property="CanUserReorderColumns" Value="False"></Setter>
   
      
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#d6c79b"/>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#d6c79b"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid标题栏样式-->
    <Style x:Key="dgheaderStyle" TargetType="DataGridColumnHeader">
        <!--<Setter Property="SnapsToDevicePixels" Value="True" />-->
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="#384F4F4F" />
        <Setter Property="FontSize" Value="8" />

        
        <!--<EventSetter Event="SizeChanged" Handler="ColumnHeader_SizeChanged"/>-->
        <!--<EventSetter Event="MouseLeftButtonUp" Handler="data_MouseLeftButtonUp"/>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Border x:Name="BackgroundBorder" BorderThickness="0,0,0,0" 
                             BorderBrush="Gray" 
                              Width="Auto" Background="#1BA1E2"       >
                 
                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter  Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <!--<Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill"  Grid.Column="2" Width="8" Height="6" Fill="Black" Margin="0,0,50,0" 
                            VerticalAlignment="Center" RenderTransformOrigin="1,1" />-->
                            <!--<Rectangle Width="1" Fill="GhostWhite" HorizontalAlignment="Right" Grid.ColumnSpan="1" />-->
                            <!--面板分隔条 --><!--
                            <GridSplitter Focusable="true" Width="2" Grid.ColumnSpan="2" Height="auto" ShowsPreview="True" HorizontalAlignment="Right" VerticalAlignment="Stretch" Background="GhostWhite"/>-->
                            <Thumb x:Name="PART_RightHeaderGripper"
                                Cursor="SizeWE" 
                             HorizontalAlignment="Right" 
                                Width="3"
                                Height="auto"
                                VerticalAlignment="Stretch" >
                                <Thumb.BitmapEffect>
                                    <DropShadowBitmapEffect Color="#000"
                                                         Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.3" />
                                </Thumb.BitmapEffect>
                            </Thumb>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="25"/>
    </Style>

    <!--行样式触发-->
    <!--背景色改变必须先设置cellStyle 因为cellStyle会覆盖rowStyle样式-->
    <Style   TargetType="DataGridRow">
        <Setter Property="Background" Value="#F2F2F2" />
        <Setter Property="Height" Value="25"/>
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="#e7e7e7" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="#f2f2f2" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"/>
                <!--<Setter Property="Foreground" Value="White"/>-->
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--单元格样式触发-->
    <Style   TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <TextBlock TextAlignment="Left"  TextWrapping="Wrap" Height="auto"  >
                           <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region 滚动条样式-->
    <!--#region 滚动条样式1-->
    <ControlTemplate x:Key="MyScrollViewer" TargetType="{x:Type ScrollViewer}">
        <!--View区域背景色-->
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="White" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Orientation="Vertical"   Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource MyScrollBarStyle}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}"  Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"  Style="{DynamicResource MyScrollBarStyle}"/>
        </Grid>
    </ControlTemplate>

    <SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="#F4F4F4"/>

    <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--滚动条颜色、圆角等设置-->
    <Style x:Key="ScrollBarThumb0" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <!--滚动条颜色和圆角设置-->
                    <Rectangle Name="thumbRect" Fill="#03ffea" RadiusX="3" RadiusY="3"/>
                    <!--鼠标拉动滚动条时的颜色-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="CornflowerBlue" TargetName="thumbRect" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="AliceBlue"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <!--滚动条宽度-->
        <Setter Property="Width" Value="20"/>
        <Setter Property="MinWidth" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <!--滚动条背景色-->
                    <Grid x:Name="Bg" Background="#001f55" SnapsToDevicePixels="true" Width="8">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb0}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="MinHeight" Value="6"/>
                <Setter Property="Background" Value="AliceBlue"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" Background="Red" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Track x:Name="PART_Track"  IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb0}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

        </Style.Triggers>
    </Style>













    <!--#endregion-->
    <!--#region 滚动条样式2-->

    <!--自定义滚动条样式-->
    <SolidColorBrush x:Key="StandardBorderBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="StandardBackgroundBrush"
                             Color="#FFF" />

    <SolidColorBrush x:Key="HoverBorderBrush"
                             Color="#DDD" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush"
                             Color="Gray" />

    <SolidColorBrush x:Key="SelectedForegroundBrush"
                             Color="White" />

    <SolidColorBrush x:Key="DisabledForegroundBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="NormalBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="NormalBorderBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="HorizontalNormalBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="HorizontalNormalBorderBrush"
                             Color="#888" />

    <SolidColorBrush x:Key="GlyphBrush"
                             Color="#444" />

    <LinearGradientBrush x:Key="ListBoxBackgroundBrush"
                                 StartPoint="0,0"
                                 EndPoint="1,0.001">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="White"
                                      Offset="0.0" />
                <GradientStop Color="White"
                                      Offset="0.6" />
                <GradientStop Color="#DDDDDD"
                                      Offset="1.2" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="StandardBrush"
                                 StartPoint="0,0"
                                 EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF"
                                      Offset="0.0" />
                <GradientStop Color="#CCC"
                                      Offset="1.0" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush"
                                 StartPoint="0,0"
                                 EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB"
                                      Offset="0.0" />
                <GradientStop Color="#EEE"
                                      Offset="0.1" />
                <GradientStop Color="#EEE"
                                      Offset="0.9" />
                <GradientStop Color="#FFF"
                                      Offset="1.0" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ScrollBarLineButton"
                   TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels"
                        Value="True" />
        <Setter Property="OverridesDefaultStyle"
                        Value="true" />
        <Setter Property="Focusable"
                        Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border"
                                    Margin="0"
                                    CornerRadius="0"
                                    Background="{StaticResource NormalBrush}"
                                    BorderBrush="{StaticResource NormalBorderBrush}"
                                    BorderThickness="1">
                        <Path HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Fill="{StaticResource GlyphBrush}"
                                      Data="{Binding Path=Content,
                RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                         Value="true">
                            <Setter TargetName="Border"
                                            Property="Background"
                                            Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                         Value="false">
                            <Setter Property="Foreground"
                                            Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton"
                   TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels"
                        Value="True" />
        <Setter Property="OverridesDefaultStyle"
                        Value="true" />
        <Setter Property="IsTabStop"
                        Value="false" />
        <Setter Property="Focusable"
                        Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb"
                   TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels"
                        Value="True" />
        <Setter Property="OverridesDefaultStyle"
                        Value="true" />
        <Setter Property="IsTabStop"
                        Value="false" />
        <Setter Property="Focusable"
                        Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar"
                             TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3"
                            CornerRadius="0"
                            Background="#F0F0F0" />
            <RepeatButton Grid.Row="0"
                                  Style="{StaticResource ScrollBarLineButton}"
                                  Height="18"
                                  Command="ScrollBar.LineUpCommand"
                                  Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track"
                           Grid.Row="1"
                           IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                          Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                                   Margin="0,0,0,0"
                                   Background="{StaticResource HorizontalNormalBrush}"
                                   BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                          Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3"
                                  Style="{StaticResource ScrollBarLineButton}"
                                  Height="18"
                                  Command="ScrollBar.LineDownCommand"
                                  Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar"
                             TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3"
                            CornerRadius="0"
                            Background="#CCCCCC" />
            <RepeatButton Grid.Column="0"
                                  Style="{StaticResource ScrollBarLineButton}"
                                 Width="18"
                                  Command="ScrollBar.LineLeftCommand"
                                  Content="M 4 0 L 4 8 L 0 4 Z"  Margin="0,0,0,0"/>

            <Track Name="PART_Track"
                           Grid.Column="1"
                           IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                          Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                                   Margin="0,0,0,0"
                                   Background="{StaticResource NormalBrush}"
                                   BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                          Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3"
                                  Style="{StaticResource ScrollBarLineButton}"
                                  Width="18"
                                  Margin="0"
                                  Command="ScrollBar.LineRightCommand"
                                  Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}"
                   TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels"
                        Value="True" />
        <Setter Property="OverridesDefaultStyle"
                        Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                             Value="Horizontal">
                <Setter Property="Width"
                                Value="Auto" />
                <Setter Property="Height"
                                Value="18" />
                <Setter Property="Template"
                                Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"
                             Value="Vertical">
                <Setter Property="Width"
                                Value="18" />
                <Setter Property="Height"
                                Value="Auto" />
                <Setter Property="Template"
                                Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavsScrollViewer"
                   TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle"                        Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="1" />

                        <ScrollBar Name="PART_VerticalScrollBar"
                                           Value="{TemplateBinding VerticalOffset}"
                                           Maximum="{TemplateBinding ScrollableHeight}"
                                           ViewportSize="{TemplateBinding ViewportHeight}"
                                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                           Orientation="Horizontal"
                                           Grid.Row="1"
                                           Grid.Column="1"
                                           Value="{TemplateBinding HorizontalOffset}"
                                           Maximum="{TemplateBinding ScrollableWidth}"
                                           ViewportSize="{TemplateBinding ViewportWidth}"
                                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#endregion-->
    <!--#region 树节点样式-->
    <!--xmlns:vc="clr-namespace:ui.DataConverter"-->
    <!-- 可视化树折叠展开的按钮样式 -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                        <!-- Rectangle 9x9 pixels -->
                        <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="true">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="Silver" Offset="0.5"/>
                                    <GradientStop Color="LightGray" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!-- 画一个垂直方向的直线 -->
                        <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true"/>
                        <!-- 画一个水平方向的直线 -->
                        <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 通过IsChecked判断折叠还是展开 -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="ExpandPath" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- 可视化树折叠展开的按钮样式 -->

    <Style x:Key="ExpandCollapseToggleStyle2" TargetType="ToggleButton">

        <Setter Property="Focusable" Value="False"/>

        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="BorderBrush" Value="Red"/>

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="ToggleButton">

                    <Grid>

                        <!-- 画折叠样式 -->

                        <Border x:Name="CollapsePath" Height="14" Width="10" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">

                            <!--<Rectangle x:Name="CollapsePath" Width="1" Height="5" Stroke="{TemplateBinding Background}" SnapsToDevicePixels="true"/>-->

                            <Path Data="M 0,0 8,7 0,14" Stretch="Fill"

                                  Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1.5"

                                  Height="14" Width="8"

                                  VerticalAlignment="Center" 

                                  HorizontalAlignment="Center"

                                  Margin="0,0,0,0">

                                <Path.LayoutTransform>

                                    <TransformGroup>

                                        <ScaleTransform/>

                                        <SkewTransform/>

                                        <RotateTransform Angle="0"/>

                                        <TranslateTransform/>

                                    </TransformGroup>

                                </Path.LayoutTransform>

                            </Path>

                        </Border>

                        <!-- 画展开折叠样式 -->

                        <Border x:Name="ExpandPath" Height="10" Width="14" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" Visibility="Collapsed">

                            <!--<Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="{TemplateBinding Background}" SnapsToDevicePixels="true"/>-->

                            <Path Data="M 0,0 8,7 0,14" Stretch="Fill"

                                  Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1.5"

                                  Height="14" Width="8"

                                  VerticalAlignment="Center" 

                                  HorizontalAlignment="Center"

                                  Margin="0,0,0,0">

                                <Path.LayoutTransform>

                                    <TransformGroup>

                                        <ScaleTransform/>

                                        <SkewTransform/>

                                        <RotateTransform Angle="90"/>

                                        <TranslateTransform/>

                                    </TransformGroup>

                                </Path.LayoutTransform>

                            </Path>

                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <!-- 通过IsChecked判断折叠还是展开 -->

                        <Trigger Property="IsChecked" Value="True">

                            <Setter Property="Visibility" TargetName="CollapsePath" Value="Collapsed"/>

                            <Setter Property="Visibility" TargetName="ExpandPath" Value="Visible"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>


    <local:TreeViewLineConverter x:Key="LineConverter"/>

    <!-- （通用）可视化树孩子样式 -->

    <Style x:Key="TreeViewItem1" TargetType="{x:Type TreeViewItem}">

        <Setter Property="Background" Value="Transparent"/>
        <!--<Setter Property="IsExpanded" Value="{Binding IsExpanded,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"/>-->

<!--此语句若为TwoWay模式会影响动态展开效果，或者可以直接删除此语句-->
        <!--<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=OneWay}"></Setter>-->

        <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->

        <!--<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->

        <Setter Property="HorizontalContentAlignment" Value="Center"/>

        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Padding" Value="2"/>

        <Setter Property="Foreground" Value="#FF565656"/>

        <Setter Property="FontFamily" Value="FZLTZHUNHK"/>

        <Setter Property="FontSize" Value="18"/>

        <Setter Property="BorderThickness" Value="0"/>

        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>-->

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid>

                        <Grid.ColumnDefinitions>

                            <ColumnDefinition MinWidth="19" Width="Auto"/>

                            <ColumnDefinition MinWidth="20" Width="Auto"/>

                            <ColumnDefinition />

                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>

                            <RowDefinition Height="Auto" MinHeight="20"/>

                            <RowDefinition  />

                        </Grid.RowDefinitions>

                        <!-- Connecting Lines -->

                        <!-- Horizontal line -->

                        <Rectangle x:Name="HorLn" Margin="9,0,0,0" Height="1" Stroke="Black" SnapsToDevicePixels="True" StrokeDashCap="Square" StrokeDashArray="3,5" StrokeDashOffset="0"/>

                        <!-- Vertical line -->

                        <Rectangle x:Name="VerLn" Width="1" Stroke="Black" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White" StrokeDashCap="Square" StrokeDashArray="3,6"/>

                        <ToggleButton x:Name="Expander" 

                                      Grid.Column="0" 

                                      Grid.Row="0"  

                                      ClickMode="Press"

                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"

                                      Style="{StaticResource ExpandCollapseToggleStyle}"/>

                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 

                                BorderThickness="{TemplateBinding BorderThickness}" 

                                Background="{TemplateBinding Background}" 

                                CornerRadius="4"

                                HorizontalAlignment="Left"

                                Grid.Column="1"

                                Margin="1"

                                Padding="{TemplateBinding Padding}" 

                                SnapsToDevicePixels="true">

                            <ContentPresenter x:Name="PART_Header" 

                                              ContentSource="Header" 

                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"

                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"

                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        </Border>

                        <ItemsPresenter x:Name="ItemsHost" 

                                        Grid.ColumnSpan="2" 

                                        Grid.Column="1" 

                                        Grid.Row="1" />

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsExpanded" Value="false">

                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>

                        </Trigger>

                        <Trigger Property="HasItems" Value="false">

                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>

                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">

                            <Setter Property="Background" TargetName="Bd" Value="#FF025BC7"/>

                            <Setter Property="Foreground" Value="#FFFFFFFF"/>

                        </Trigger>

                        <!--被选中后失去焦点-->

                        <MultiTrigger>

                            <MultiTrigger.Conditions>

                                <Condition Property="IsSelected" Value="true"/>

                                <Condition Property="IsSelectionActive" Value="false"/>

                            </MultiTrigger.Conditions>

                            <Setter Property="Background" TargetName="Bd" Value="#FF025BC7"/>

                            <Setter Property="Foreground" Value="#FFFFFFFF"/>

                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>

                        </Trigger>

                        <!-- 当前层最后一个元素不画下方垂直线 -->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">

                            <Setter TargetName="VerLn" Property="Height" Value="15"/>

                            <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>

                        </DataTrigger>

                        <!-- Root第一个元素不显示上方垂直线 -->

                        <Trigger Property="TabIndex" Value="1">

                            <Setter TargetName="VerLn" Property="Margin" Value="0,12,1,0"/>

                            <Setter TargetName="VerLn" Property="Height" Value="Auto"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">

                <Setter Property="ItemsPanel">

                    <Setter.Value>

                        <ItemsPanelTemplate>

                            <VirtualizingStackPanel/>

                        </ItemsPanelTemplate>

                    </Setter.Value>

                </Setter>

            </Trigger>

        </Style.Triggers>



    </Style>

    <!--#endregion-->
    <!--#region 树视图样式--><!--
    <Style x:Key="TreeViewStyle" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="True" Template="{DynamicResource MyScrollViewer}" >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Stretch" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    --><!--#endregion-->

</ResourceDictionary>

